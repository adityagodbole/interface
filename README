== Description
  This module provides Java style interfaces for Ruby, including a fairly
  similar syntax.  I don't necessarily believe in interfaces, but I wanted to
  put it out there as proof that it could be done.  Frankly, Java needs mixins
  more than Ruby needs interfaces, but here you go.

== Installation
  gem install interface

== Synopsis
  require 'interface'
  
  Calculator = interface {
    public_visible :fact
  }
  
  class Calc
    def fact(n)
      res = 1
      n.times do |i|
        res *= i + 1
      end
      res
    end
  
    # This will check whether class Calc implements
    # all methods mentioned in Calculator interface
    implements Calculator
  end
  
  def do_fact(calc, n)
    # check_interface and check_class do nothing unless
    # environment variable RUBY_INTERFACE_TYPECHECK=1

    # Check whether calc satisfies interface Calculator
    check_interface { { Calculator => calc } }
    # Check whether n is of class Integer
    check_class { { Integer => n } }
    calc.fact(n)
  end
 
  do_sum(Calc.new, (1...1000).to_a)

== General Notes
  Subinterfaces work as well. See the test_sub.rb file under the 'test'
  directory for a sample.
  Since the `check_interface` and `check_class` methods are meant to be
  invoked for every invocation of a method, there is a runtime overhead
  associated which may not be desirable in production. Hence these methods
  are guarded by an environment variable RUBY_INTERFACE_TYPECHECK. Unless
  this variable is set to 1, the check methods are defined as empty methods.

== Runtime performance of check methods
  On a Macbook Pro 2.4 GHz Intel Core i5 machine, adding a check
  method costs about 1 second for every million calls. YMMV. It is advisable
  to benchmark for your code to determine if the overhead is acceptable in
  your enviroment.

== Developer's Notes
  A discussion on IRC with Mauricio Fernandez got us talking about traits.
  During that discussion I remembered a blog entry by David Naseby. I 
  revisited his blog entry and took a closer look:

  http://ruby-naseby.blogspot.com/2008/11/traits-in-ruby.html

  Keep in mind that I also happened to be thinking about Java at the moment
  because of a recent job switch that involved coding in Java. I was also
  trying to figure out what the purpose of interfaces were.

  As I read the first page of David Naseby's article I realized that,
  whether intended or not, he had implemented a rudimentary form of interfaces
  for Ruby. When I discovered this, I talked about it some more with Mauricio
  and he and I (mostly him) fleshed out the rest of the module, including some
  syntax improvements. The result is syntax and functionality that is nearly
  identical to Java.

  I should note that, although I am listed as the author, this was mostly the
  combined work of David Naseby and Mauricio Fernandez. I just happened to be
  the guy that put it all together.

== Acknowledgements
  This module was largely inspired and somewhat copied from a post by
  David Naseby (see URL above). It was subsequently modified almost entirely
  by Mauricio Fernandez through a series of discussions on IRC.
	
== Copyright
  (C) 2004-2016 Daniel J. Berger
  All rights reserved.
	
== Warranty
  This package is provided "as is" and without any express or
  implied warranties, including, without limitation, the implied
  warranties of merchantability and fitness for a particular purpose.
	
== License
  Artistic 2.0
	
== Author
  Daniel J. Berger
